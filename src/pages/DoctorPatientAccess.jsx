import { useEffect, useState } from "react"
import Sidebar from "../components/doctors/Sidebar"
import { useSmartContract } from "../hooks"
import useIpfs from "../hooks/useIPFS"
import { toast } from "react-toastify"

function DoctorPatientAccess() {
  const {
    walletAddress,
    fetchAuthorizedPatients,
    getSharedRecordsByDoctor,
    getMedicalRecords,
    hasAccessToPatient,
    isLoading: contractLoading,
  } = useSmartContract()
  const { ipfs, getJson } = useIpfs()

  const [localAuthorizedPatients, setLocalAuthorizedPatients] = useState([])
  const [sharedRecords, setSharedRecords] = useState([])
  const [selectedPatient, setSelectedPatient] = useState(null)
  const [patientRecords, setPatientRecords] = useState([])
  const [selectedRecord, setSelectedRecord] = useState(null)
  const [recordDetails, setRecordDetails] = useState(null)
  const [isLoadingDetails, setIsLoadingDetails] = useState(false)

  useEffect(() => {
    const fetchData = async () => {
      if (walletAddress) {
        try {
          const [patients, shared] = await Promise.all([fetchAuthorizedPatients(), getSharedRecordsByDoctor()])
          setLocalAuthorizedPatients(patients)
          setSharedRecords(shared)
        } catch (error) {
          console.error("L·ªói t·∫£i d·ªØ li·ªáu:", error)
        }
      }
    }

    fetchData()
  }, [walletAddress, fetchAuthorizedPatients, getSharedRecordsByDoctor])

  const handleViewPatientRecords = async (patient) => {
    try {
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      const hasAccess = await hasAccessToPatient(patient.address)
      if (!hasAccess) {
        alert("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p h·ªì s∆° c·ªßa b·ªánh nh√¢n n√†y.")
        return
      }

      // L·∫•y h·ªì s∆° y t·∫ø c·ªßa b·ªánh nh√¢n
      const records = await getMedicalRecords(patient.address)
      setPatientRecords(records.filter((record) => record.isApproved))
      setSelectedPatient(patient)
    } catch (error) {
      console.error("L·ªói l·∫•y h·ªì s∆° b·ªánh nh√¢n:", error)
    }
  }

  const recordTypeToString = (type) => {
    switch (Number(type)) {
      case 1:
        return "H·ªì s∆° kh√°m b·ªánh"
      case 2:
        return "K·∫øt qu·∫£ x√©t nghi·ªám"
      case 3:
        return "ƒê∆°n thu·ªëc"
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh"
    }
  }

  const getRecordTypeIcon = (type) => {
    switch (Number(type)) {
      case 1:
        return "üè•"
      case 2:
        return "üß™"
      case 3:
        return "üíä"
      default:
        return "üìÑ"
    }
  }

  const viewRecordDetails = async (record) => {
    try {
      setIsLoadingDetails(true)
      setSelectedRecord(record)
      const jsonData = await getJson(record.ipfsHash)
      setRecordDetails(JSON.parse(jsonData))
    } catch (error) {
      console.error("L·ªói khi l·∫•y chi ti·∫øt h·ªì s∆°:", error)
      toast.error("Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt h·ªì s∆° y t·∫ø.")
    } finally {
      setIsLoadingDetails(false)
    }
  }

  const closeRecordModal = () => {
    setSelectedRecord(null)
    setRecordDetails(null)
  }

  if (contractLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="w-8 h-8 border-4 border-indigo-600 border-t-transparent rounded-full animate-spin"></div>
      </div>
    )
  }

  return (
    <div className="w-full min-h-screen bg-gradient-to-br from-indigo-50 to-blue-50">
      {/* Hero Section */}
      <section
        className="relative min-h-[40vh] flex items-center justify-center bg-cover bg-center bg-no-repeat"
        style={{
          backgroundImage: `linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url('https://images.unsplash.com/photo-1559757175-0eb30cd8c063')`,
        }}
      >
        <div className="container mx-auto px-6 text-center">
          <h1 className="text-4xl md:text-5xl font-extrabold text-white mb-4">B·ªánh nh√¢n ƒë√£ c·∫•p quy·ªÅn</h1>
          <p className="text-lg md:text-xl text-gray-200">
            Qu·∫£n l√Ω v√† xem h·ªì s∆° c·ªßa c√°c b·ªánh nh√¢n ƒë√£ c·∫•p quy·ªÅn truy c·∫≠p.
          </p>
        </div>
      </section>

      <section className="py-16">
        <div className="container mx-auto px-6">
          <div className="flex flex-col lg:flex-row gap-8">
            <Sidebar />

            <div className="lg:w-3/4">
              {/* Th·ªëng k√™ */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-blue-100 rounded-full">
                      <span className="text-2xl">üë•</span>
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg font-semibold text-gray-800">B·ªánh nh√¢n</h3>
                      <p className="text-2xl font-bold text-blue-600">{localAuthorizedPatients.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-green-100 rounded-full">
                      <span className="text-2xl">üìã</span>
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg font-semibold text-gray-800">H·ªì s∆° ƒë∆∞·ª£c chia s·∫ª</h3>
                      <p className="text-2xl font-bold text-green-600">{sharedRecords.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-purple-100 rounded-full">
                      <span className="text-2xl">üîê</span>
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg font-semibold text-gray-800">Quy·ªÅn truy c·∫≠p</h3>
                      <p className="text-2xl font-bold text-purple-600">ƒê√£ c·∫•p</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Danh s√°ch b·ªánh nh√¢n ƒë√£ c·∫•p quy·ªÅn */}
              <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
                <h2 className="text-2xl font-bold text-gray-800 mb-6">Danh s√°ch b·ªánh nh√¢n ƒë√£ c·∫•p quy·ªÅn</h2>

                {localAuthorizedPatients.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">üë•</div>
                    <p className="text-gray-600 text-lg">Ch∆∞a c√≥ b·ªánh nh√¢n n√†o c·∫•p quy·ªÅn.</p>
                    <p className="text-gray-500 text-sm mt-2">
                      B·ªánh nh√¢n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p ƒë·ªÉ b·∫°n c√≥ th·ªÉ xem h·ªì s∆° c·ªßa h·ªç.
                    </p>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {localAuthorizedPatients.map((patient, index) => (
                      <div
                        key={index}
                        className="p-6 bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200"
                      >
                        <div className="flex items-center mb-4">
                          <div className="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center">
                            <span className="text-xl">üë§</span>
                          </div>
                          <div className="ml-4">
                            <h3 className="text-lg font-semibold text-gray-800">{patient.fullName}</h3>
                            <p className="text-sm text-gray-500">{patient.email}</p>
                          </div>
                        </div>

                        <div className="mb-4">
                          <p className="text-sm text-gray-500">ƒê·ªãa ch·ªâ v√≠</p>
                          <p className="text-xs text-gray-700 font-mono break-all">{patient.address}</p>
                        </div>

                        <button
                          onClick={() => handleViewPatientRecords(patient)}
                          className="w-full py-2 px-4 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-colors duration-200"
                        >
                          Xem h·ªì s∆° y t·∫ø
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* H·ªì s∆° ƒë∆∞·ª£c chia s·∫ª */}
              <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
                <h2 className="text-2xl font-bold text-gray-800 mb-6">H·ªì s∆° ƒë∆∞·ª£c chia s·∫ª tr·ª±c ti·∫øp</h2>

                {sharedRecords.length === 0 ? (
                  <p className="text-gray-600 text-center">Ch∆∞a c√≥ h·ªì s∆° n√†o ƒë∆∞·ª£c chia s·∫ª tr·ª±c ti·∫øp.</p>
                ) : (
                  <div className="space-y-4">
                    {sharedRecords
                      .sort((a, b) => b.timestamp - a.timestamp)
                      .map((record, index) => (
                        <div
                          key={index}
                          className="p-4 bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center mb-2">
                                <span className="text-xl mr-3">{getRecordTypeIcon(record.recordType)}</span>
                                <h3 className="text-lg font-semibold text-gray-800">
                                  {recordTypeToString(record.recordType)}
                                </h3>
                              </div>

                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <p className="text-sm text-gray-500">B·ªánh nh√¢n</p>
                                  <p className="text-gray-700 font-medium">{record.patientName}</p>
                                </div>

                                <div>
                                  <p className="text-sm text-gray-500">Ng√†y chia s·∫ª</p>
                                  <p className="text-gray-700 font-medium">
                                    {new Date(record.timestamp * 1000).toLocaleDateString("vi-VN")}
                                  </p>
                                </div>

                                {record.notes && (
                                  <div className="md:col-span-2">
                                    <p className="text-sm text-gray-500">Ghi ch√∫</p>
                                    <p className="text-gray-700">{record.notes}</p>
                                  </div>
                                )}
                              </div>

                              <div className="mt-3">
                                <button
                                  onClick={() => viewRecordDetails(record)}
                                  className="inline-flex items-center px-3 py-1 text-sm font-medium text-indigo-600 bg-indigo-50 rounded hover:bg-indigo-100 transition-colors duration-200"
                                >
                                  <span className="mr-1">üëÅÔ∏è</span>
                                  Xem chi ti·∫øt
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                )}
              </div>

              {/* Modal xem h·ªì s∆° b·ªánh nh√¢n */}
              {selectedPatient && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                  <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                    <div className="p-6 border-b border-gray-200">
                      <div className="flex justify-between items-center">
                        <h2 className="text-2xl font-bold text-gray-800">H·ªì s∆° y t·∫ø - {selectedPatient.fullName}</h2>
                        <button
                          onClick={() => {
                            setSelectedPatient(null)
                            setPatientRecords([])
                          }}
                          className="text-gray-500 hover:text-gray-700 text-2xl"
                        >
                          √ó
                        </button>
                      </div>
                    </div>

                    <div className="p-6">
                      {patientRecords.length === 0 ? (
                        <p className="text-gray-600 text-center">B·ªánh nh√¢n ch∆∞a c√≥ h·ªì s∆° y t·∫ø n√†o ƒë∆∞·ª£c ph√™ duy·ªát.</p>
                      ) : (
                        <div className="space-y-4">
                          {patientRecords
                            .sort((a, b) => b.timestamp - a.timestamp)
                            .map((record, index) => (
                              <div key={index} className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                                <div className="flex items-center mb-3">
                                  <span className="text-xl mr-3">{getRecordTypeIcon(record.recordType)}</span>
                                  <h3 className="text-lg font-semibold text-gray-800">
                                    {recordTypeToString(record.recordType)}
                                  </h3>
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                  <div>
                                    <p className="text-sm text-gray-500">B√°c sƒ© ƒëi·ªÅu tr·ªã</p>
                                    <p className="text-gray-700 font-medium">{record.doctorName}</p>
                                  </div>

                                  <div>
                                    <p className="text-sm text-gray-500">Ng√†y t·∫°o</p>
                                    <p className="text-gray-700 font-medium">
                                      {new Date(record.timestamp * 1000).toLocaleDateString("vi-VN")}
                                    </p>
                                  </div>
                                </div>

                                <div className="mt-3">
                                  <button
                                    onClick={() => viewRecordDetails(record)}
                                    className="inline-flex items-center px-3 py-1 text-sm font-medium text-indigo-600 bg-indigo-50 rounded hover:bg-indigo-100 transition-colors duration-200"
                                  >
                                    <span className="mr-1">üëÅÔ∏è</span>
                                    Xem chi ti·∫øt
                                  </button>
                                </div>
                              </div>
                            ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* Modal xem chi ti·∫øt h·ªì s∆° y t·∫ø */}
              {selectedRecord && recordDetails && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                  <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                    <div className="p-6 border-b border-gray-200">
                      <div className="flex justify-between items-center">
                        <h2 className="text-2xl font-bold text-gray-800">Chi ti·∫øt h·ªì s∆° y t·∫ø</h2>
                        <button onClick={closeRecordModal} className="text-gray-500 hover:text-gray-700 text-2xl">
                          √ó
                        </button>
                      </div>
                    </div>

                    <div className="p-6">
                      {/* Th√¥ng tin chung */}
                      <div className="mb-6">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">Th√¥ng tin chung</h3>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <p className="text-sm text-gray-500">Ng√†y kh√°m</p>
                            <p className="text-gray-700">{recordDetails.visitDate}</p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-500">B·ªánh nh√¢n</p>
                            <p className="text-gray-700">{selectedRecord.patientName}</p>
                          </div>
                        </div>
                      </div>

                      {/* Hi·ªÉn th·ªã t·ª´ng lo·∫°i record */}
                      {recordDetails.records.map((record, index) => (
                        <div key={index} className="mb-6 p-4 bg-gray-50 rounded-lg">
                          <h3 className="text-lg font-semibold text-gray-800 mb-4">
                            {record.recordType === "EXAMINATION_RECORD" && "H·ªì s∆° kh√°m b·ªánh"}
                            {record.recordType === "TEST_RESULT" && "K·∫øt qu·∫£ x√©t nghi·ªám"}
                            {record.recordType === "PRESCRIPTION" && "ƒê∆°n thu·ªëc"}
                          </h3>

                          {record.recordType === "EXAMINATION_RECORD" && (
                            <div className="space-y-4">
                              <div>
                                <p className="text-sm text-gray-500">Tri·ªáu ch·ª©ng</p>
                                <p className="text-gray-700 whitespace-pre-line">{record.details.symptoms}</p>
                              </div>
                              <div>
                                <p className="text-sm text-gray-500">Ch·∫©n ƒëo√°n</p>
                                <p className="text-gray-700 whitespace-pre-line">{record.details.diagnosis}</p>
                              </div>
                              {record.details.notes && (
                                <div>
                                  <p className="text-sm text-gray-500">Ghi ch√∫</p>
                                  <p className="text-gray-700 whitespace-pre-line">{record.details.notes}</p>
                                </div>
                              )}
                            </div>
                          )}

                          {record.recordType === "TEST_RESULT" && (
                            <div className="space-y-4">
                              <div>
                                <p className="text-sm text-gray-500">Lo·∫°i x√©t nghi·ªám</p>
                                <p className="text-gray-700">{record.details.testType}</p>
                              </div>
                              <div>
                                <p className="text-sm text-gray-500">K·∫øt qu·∫£</p>
                                <p className="text-gray-700 whitespace-pre-line">{record.details.results}</p>
                              </div>
                              {record.details.comments && (
                                <div>
                                  <p className="text-sm text-gray-500">Nh·∫≠n x√©t</p>
                                  <p className="text-gray-700 whitespace-pre-line">{record.details.comments}</p>
                                </div>
                              )}
                            </div>
                          )}

                          {record.recordType === "PRESCRIPTION" && (
                            <div className="space-y-4">
                              <div>
                                <p className="text-sm text-gray-500 mb-2">Danh s√°ch thu·ªëc</p>
                                <div className="space-y-3">
                                  {record.details.medications.map((med, idx) => (
                                    <div key={idx} className="p-3 bg-white rounded-lg border border-gray-200">
                                      <p className="font-medium text-gray-800">{med.name}</p>
                                      <p className="text-sm text-gray-600">Li·ªÅu l∆∞·ª£ng: {med.dosage}</p>
                                      <p className="text-sm text-gray-600">H∆∞·ªõng d·∫´n: {med.instructions}</p>
                                    </div>
                                  ))}
                                </div>
                              </div>
                              {record.details.notes && (
                                <div>
                                  <p className="text-sm text-gray-500">Ghi ch√∫</p>
                                  <p className="text-gray-700 whitespace-pre-line">{record.details.notes}</p>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default DoctorPatientAccess
